'use strict';

exports.__esModule = true;
exports['default'] = scanAndLink;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _log = require('./util/log');

var _link = require('./link');

var _packRef = require('./pack-ref');

var _findPackages = require('./find-packages');

var _findPackages2 = _interopRequireDefault(_findPackages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _ref() {}

function _ref3(acc, _ref2) {
  var src = _ref2[0],
      dst = _ref2[1],
      size = _ref2[2];

  acc += size;
  return acc;
}

function scanAndLink(config, rtenv, rootDirs) {
  var logUpdate = (0, _log.createLogUpdate)(config, rtenv);

  var outputSrcDstForDryrun = config.dryrun ? function (lnkSrcDst) {
    var dnv = lnkSrcDst.devNameVer,
        src = lnkSrcDst.src,
        dst = lnkSrcDst.dst;

    rtenv.log.clear();
    rtenv.out(_chalk2['default'].bold(dnv.split(':')[0])); // nameVersion
    rtenv.out('  ' + src);
    rtenv.out('  ' + dst);
    rtenv.out('');
  } : _ref;

  return (0, _findPackages2['default'])(config, rtenv, rootDirs, logUpdate).takeWhile(function () {
    return !rtenv.cancelled;
  }).mergeMap(function (eiDN) {
    return (0, _packRef.determinePackLinkSrcDst)(config, rtenv, eiDN);
  }, config.concurrentOps).takeWhile(function () {
    return !rtenv.cancelled;
  })['do'](function (lnkSrcDst) {
    return outputSrcDstForDryrun(lnkSrcDst);
  })['do'](function (lnkSrcDst) {
    rtenv.currentPackageDir = lnkSrcDst.dst;
    logUpdate();
  }).mergeMap(function (lnkSrcDst) {
    if (config.dryrun) {
      return (0, _link.determineLinks)(config, rtenv, lnkSrcDst, false);
    } else if (config.genLnCmds) {
      return (0, _link.genModuleLinks)(config, rtenv, lnkSrcDst);
    }
    return (0, _link.handleModuleLinking)(config, rtenv, lnkSrcDst);
  }, config.concurrentOps).scan(_ref3, 0)['do'](function (savedBytes) {
    rtenv.savedByteCount = savedBytes;
  })['do'](function (savedBytes) {
    return logUpdate();
  });
}