'use strict';

exports.__esModule = true;
exports.configSchema = exports.argvSchema = undefined;
exports.gatherOptions = gatherOptions;
exports.gatherConfig = gatherConfig;
exports.gatherOptionsConfig = gatherOptionsConfig;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _file = require('./util/file');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var minimistOpts = {
  boolean: ['d', 'g', 'h', 'p', 'v'],
  string: ['c', 'm', 'r'],
  alias: {
    c: 'config',
    d: 'dryrun',
    g: 'gen-ln-cmds',
    h: 'help',
    m: 'memory',
    p: 'prune',
    r: 'refs-file',
    t: 'tree-depth',
    v: 'verbose'
  }
};

var argvSchema = exports.argvSchema = _joi2['default'].object({
  config: _joi2['default'].string(),
  'refs-file': _joi2['default'].string(),
  'tree-depth': _joi2['default'].number().integer().min(0)
}).unknown();

var configSchema = exports.configSchema = _joi2['default'].object({
  refsFile: _joi2['default'].string()['default'](_path2['default'].resolve(_os2['default'].homedir(), _constants.DEFAULT_REFS_FILE)),
  concurrentOps: _joi2['default'].number().integer().min(1)['default'](4),
  // windows does not maintain original modtimes for installs
  // so ignoreModTime is defaulted to true for win32
  ignoreModTime: _joi2['default'].boolean()['default'](_os2['default'].platform() === 'win32'),
  memory: _joi2['default'].number().integer().min(100)['default'](2560), // MB
  minFileSize: _joi2['default'].number().integer().min(0)['default'](0), // bytes
  treeDepth: _joi2['default'].number().integer().min(0)['default'](0),
  refSize: _joi2['default'].number().integer().min(1)['default'](5),
  consoleWidth: _joi2['default'].number().integer().min(30)['default'](70)
});

function _ref(err) {
  console.error(err.message);
}

function gatherOptions(processArgv, displayHelp) {
  // processArgv is already sliced, process.argv.slice(2)
  var unvalidArgv = (0, _minimist2['default'])(processArgv, minimistOpts);
  var argvVResult = _joi2['default'].validate(unvalidArgv, argvSchema);
  if (argvVResult.error) {
    if (displayHelp) {
      displayHelp();
    }
    console.error('');
    console.error(_chalk2['default'].red('error: invalid argument specified'));
    argvVResult.error.details.forEach(_ref);
    process.exit(20);
  }
  var argv = argvVResult.value; // possibly updated by schema
  return argv;
}

function _ref2(err) {
  console.error(err.message);
}

function gatherConfig(argv, unvalidatedConfig, configPath) {
  var configResult = _joi2['default'].validate(unvalidatedConfig, configSchema, { abortEarly: false });
  if (configResult.error) {
    console.error(_chalk2['default'].red('error: invalid JSON configuration'));
    console.error(_chalk2['default'].bold('config file:') + ' ' + configPath);
    configResult.error.details.forEach(_ref2);
    process.exit(22);
  }
  var config = configResult.value; // with defaults applied
  _ramda2['default'].toPairs({ // for these defined argv values override config
    dryrun: argv.dryrun,
    genLnCmds: argv['gen-ln-cmds'],
    memory: argv.memory,
    refsFile: argv['refs-file'],
    treeDepth: argv['tree-depth']
  }).forEach(function (p) {
    var k = p[0];
    var v = p[1];
    if (!_ramda2['default'].isNil(v)) {
      // if defined, use it
      config[k] = v;
    }
  });
  // define how much room is left for displaying paths
  config.extraCols = config.consoleWidth - 30;
  return config;
}

function gatherOptionsConfig(processArgv, displayHelp) {
  var argv = gatherOptions(processArgv, displayHelp);

  var CONFIG_PATH = argv.config || _path2['default'].resolve(_os2['default'].homedir(), _constants.DEFAULT_CONFIG_FILE);

  var parsedConfigJson = (0, _file.safeJsonReadSync)(CONFIG_PATH);
  if (parsedConfigJson instanceof Error) {
    console.error(_chalk2['default'].red('error: invalid JSON configuration'));
    console.error(_chalk2['default'].bold('config file:') + ' ' + CONFIG_PATH);
    console.error(parsedConfigJson); // error
    process.exit(21);
  }
  var unvalidatedConfig = parsedConfigJson || {};

  var config = gatherConfig(argv, unvalidatedConfig, CONFIG_PATH);

  return {
    argv: argv,
    config: config
  };
}