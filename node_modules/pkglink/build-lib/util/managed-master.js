'use strict';

exports.__esModule = true;
exports['default'] = runAsMaster;

var _cluster = require('cluster');

var _cluster2 = _interopRequireDefault(_cluster);

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// child process is killed if doesn't shutdown in this time
var STOP_TIMEOUT = 10000; // 10s

function _ref() {
  process.emit('SIGINT');
}

function onInterrupt(fn) {
  process.once('SIGINT', fn);
}

function runAsMaster(INTERRUPT_TYPE) {
  var win32 = process.platform === 'win32';
  var readline = void 0;
  if (win32) {
    readline = _readline2['default'].createInterface({
      input: process.stdin,
      output: process.stdout
    });

    readline.on('SIGINT', _ref);
  }

  var shutdown = _ramda2['default'].once(function () {
    if (readline) {
      readline.close();
    }
  });

  function launchChildWorker(script, opts) {
    var options = _ramda2['default'].merge({
      exec: script,
      stopTimeout: STOP_TIMEOUT
    }, opts);
    _cluster2['default'].setupMaster(options);
    var worker = _cluster2['default'].fork();

    var killTimeout = null;

    function _ref2() {
      console.log('killing child');
      worker.kill('SIGTERM');
      killTimeout = null;
    }

    var cancel = _ramda2['default'].once(function () {
      // for windows compatibility
      worker.send({ type: INTERRUPT_TYPE });

      // failsafe timer, kills child if doesn't shutdown
      killTimeout = setTimeout(_ref2, options.stopTimeout);
    });

    process.once('SIGINT', cancel).once('SIGTERM', cancel);

    worker.on('exit', function (code) {
      process.exitCode = code;
      if (killTimeout) {
        try {
          clearTimeout(killTimeout);
          killTimeout = null;
        } catch (err) {
          console.error(err);
        }
      }
      shutdown();
    });

    return worker;
  }return {
    launchChildWorker: launchChildWorker,
    onInterrupt: onInterrupt,
    shutdown: shutdown
  };
}