/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';
import { WINDOW } from 'ngx-window-token';
export class ClipboardService {
    /**
     * @param {?} document
     * @param {?} window
     */
    constructor(document, window) {
        this.document = document;
        this.window = window;
    }
    /**
     * @return {?}
     */
    get isSupported() {
        return (!!this.document.queryCommandSupported &&
            !!this.document.queryCommandSupported('copy'));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    isTargetValid(element) {
        if (element instanceof HTMLInputElement ||
            element instanceof HTMLTextAreaElement) {
            if (element.hasAttribute('disabled')) {
                // tslint:disable-next-line:max-line-length
                throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
            }
            return true;
        }
        throw new Error('Target should be input or textarea');
    }
    /**
     * copyFromInputElement
     * @param {?} targetElm
     * @return {?}
     */
    copyFromInputElement(targetElm) {
        try {
            this.selectTarget(targetElm);
            const /** @type {?} */ re = this.copyText();
            this.clearSelection(targetElm, this.window);
            return re;
        }
        catch (/** @type {?} */ error) {
            return false;
        }
    }
    /**
     * Creates a fake textarea element, sets its value from `text` property,
     * and makes a selection on it.
     * @param {?} content
     * @return {?}
     */
    copyFromContent(content) {
        if (!this.tempTextArea) {
            this.tempTextArea = this.createTempTextArea(this.document, this.window);
            this.document.body.appendChild(this.tempTextArea);
        }
        this.tempTextArea.value = content;
        return this.copyFromInputElement(this.tempTextArea);
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.tempTextArea) {
            this.document.body.removeChild(this.tempTextArea);
            this.tempTextArea = undefined;
        }
    }
    /**
     * @param {?} inputElement
     * @return {?}
     */
    selectTarget(inputElement) {
        inputElement.select();
        inputElement.setSelectionRange(0, inputElement.value.length);
        return inputElement.value.length;
    }
    /**
     * @return {?}
     */
    copyText() {
        return this.document.execCommand('copy');
    }
    /**
     * @param {?} inputElement
     * @param {?} window
     * @return {?}
     */
    clearSelection(inputElement, window) {
        // tslint:disable-next-line:no-unused-expression
        inputElement && inputElement.blur();
        window.getSelection().removeAllRanges();
    }
    /**
     * @param {?} doc
     * @param {?} window
     * @return {?}
     */
    createTempTextArea(doc, window) {
        const /** @type {?} */ isRTL = doc.documentElement.getAttribute('dir') === 'rtl';
        let /** @type {?} */ ta;
        ta = doc.createElement('textarea');
        // Prevent zooming on iOS
        ta.style.fontSize = '12pt';
        // Reset box model
        ta.style.border = '0';
        ta.style.padding = '0';
        ta.style.margin = '0';
        // Move element out of screen horizontally
        ta.style.position = 'absolute';
        ta.style[isRTL ? 'right' : 'left'] = '-9999px';
        // Move element to the same position vertically
        const /** @type {?} */ yPosition = window.pageYOffset || doc.documentElement.scrollTop;
        ta.style.top = yPosition + 'px';
        ta.setAttribute('readonly', '');
        return ta;
    }
}
ClipboardService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ClipboardService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [WINDOW,] },] },
];
function ClipboardService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ClipboardService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ClipboardService.ctorParameters;
    /** @type {?} */
    ClipboardService.prototype.tempTextArea;
    /** @type {?} */
    ClipboardService.prototype.document;
    /** @type {?} */
    ClipboardService.prototype.window;
}
/**
 * @param {?} doc
 * @param {?} win
 * @param {?} parentDispatcher
 * @return {?}
 */
export function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc, win, parentDispatcher) {
    return parentDispatcher || new ClipboardService(doc, win);
}
export const /** @type {?} */ CLIPBOARD_SERVICE_PROVIDER = {
    deps: [/** @type {?} */ (DOCUMENT), /** @type {?} */ (WINDOW), [new Optional(), new SkipSelf(), ClipboardService]
    ],
    provide: ClipboardService,
    useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY
};

//# sourceMappingURL=data:application/json;base64,