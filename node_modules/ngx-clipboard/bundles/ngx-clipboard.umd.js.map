{"version":3,"file":"ngx-clipboard.umd.js.map","sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"sourcesContent":["import {\r\n  Inject,\r\n  Injectable,\r\n  Optional,\r\n  SkipSelf,\r\n  InjectionToken\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { WINDOW } from 'ngx-window-token';\r\n\r\n@Injectable()\r\nexport class ClipboardService {\r\n  private tempTextArea: HTMLTextAreaElement | undefined;\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: any,\r\n    @Inject(WINDOW) private window: any\r\n  ) {}\r\n  public get isSupported(): boolean {\r\n    return (\r\n      !!this.document.queryCommandSupported &&\r\n      !!this.document.queryCommandSupported('copy')\r\n    );\r\n  }\r\n\r\n  public isTargetValid(\r\n    element: HTMLInputElement | HTMLTextAreaElement\r\n  ): boolean {\r\n    if (\r\n      element instanceof HTMLInputElement ||\r\n      element instanceof HTMLTextAreaElement\r\n    ) {\r\n      if (element.hasAttribute('disabled')) {\r\n        // tslint:disable-next-line:max-line-length\r\n        throw new Error(\r\n          'Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute'\r\n        );\r\n      }\r\n      return true;\r\n    }\r\n    throw new Error('Target should be input or textarea');\r\n  }\r\n\r\n  /**\r\n   * copyFromInputElement\r\n   */\r\n  public copyFromInputElement(\r\n    targetElm: HTMLInputElement | HTMLTextAreaElement\r\n  ): boolean {\r\n    try {\r\n      this.selectTarget(targetElm);\r\n      const re = this.copyText();\r\n      this.clearSelection(targetElm, this.window);\r\n      return re;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a fake textarea element, sets its value from `text` property,\r\n   * and makes a selection on it.\r\n   */\r\n  public copyFromContent(content: string) {\r\n    if (!this.tempTextArea) {\r\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n      this.document.body.appendChild(this.tempTextArea);\r\n    }\r\n    this.tempTextArea.value = content;\r\n    return this.copyFromInputElement(this.tempTextArea);\r\n  }\r\n\r\n  // remove temporary textarea if any\r\n  public destroy() {\r\n    if (this.tempTextArea) {\r\n      this.document.body.removeChild(this.tempTextArea);\r\n      this.tempTextArea = undefined;\r\n    }\r\n  }\r\n\r\n  // select the target html input element\r\n  private selectTarget(\r\n    inputElement: HTMLInputElement | HTMLTextAreaElement\r\n  ): number | undefined {\r\n    inputElement.select();\r\n    inputElement.setSelectionRange(0, inputElement.value.length);\r\n    return inputElement.value.length;\r\n  }\r\n\r\n  private copyText(): boolean {\r\n    return this.document.execCommand('copy');\r\n  }\r\n  // Removes current selection and focus from `target` element.\r\n  private clearSelection(\r\n    inputElement: HTMLInputElement | HTMLTextAreaElement,\r\n    window: Window\r\n  ) {\r\n    // tslint:disable-next-line:no-unused-expression\r\n    inputElement && inputElement.blur();\r\n    window.getSelection().removeAllRanges();\r\n  }\r\n\r\n  // create a fake textarea for copy command\r\n  private createTempTextArea(\r\n    doc: Document,\r\n    window: Window\r\n  ): HTMLTextAreaElement {\r\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n    let ta: HTMLTextAreaElement;\r\n    ta = doc.createElement('textarea');\r\n    // Prevent zooming on iOS\r\n    ta.style.fontSize = '12pt';\r\n    // Reset box model\r\n    ta.style.border = '0';\r\n    ta.style.padding = '0';\r\n    ta.style.margin = '0';\r\n    // Move element out of screen horizontally\r\n    ta.style.position = 'absolute';\r\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n    // Move element to the same position vertically\r\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n    ta.style.top = yPosition + 'px';\r\n    ta.setAttribute('readonly', '');\r\n    return ta;\r\n  }\r\n}\r\n// this pattern is mentioned in https://github.com/angular/angular/issues/13854 in #43\r\nexport function CLIPBOARD_SERVICE_PROVIDER_FACTORY(\r\n  doc: Document,\r\n  win: Window,\r\n  parentDispatcher: ClipboardService\r\n) {\r\n  return parentDispatcher || new ClipboardService(doc, win);\r\n}\r\n\r\nexport const CLIPBOARD_SERVICE_PROVIDER = {\r\n  deps: [\r\n    DOCUMENT as InjectionToken<Document>,\r\n    WINDOW as InjectionToken<Window>,\r\n    [new Optional(), new SkipSelf(), ClipboardService]\r\n  ],\r\n  provide: ClipboardService,\r\n  useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY\r\n};\r\n","import {\n  Directive,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\n\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxClipboard]'\n})\nexport class ClipboardDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('ngxClipboard') public targetElm: HTMLInputElement;\n\n  @Input() public cbContent: string;\n\n  @Output() public cbOnSuccess: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() public cbOnError: EventEmitter<any> = new EventEmitter<any>();\n  constructor(private clipboardSrv: ClipboardService) {}\n\n  // tslint:disable-next-line:no-empty\n  public ngOnInit() {}\n\n  public ngOnDestroy() {\n    this.clipboardSrv.destroy();\n  }\n\n  @HostListener('click', ['$event.target'])\n  public onClick(event: Event) {\n    if (!this.clipboardSrv.isSupported) {\n      this.handleResult(false, undefined);\n    } else if (\n      this.targetElm &&\n      this.clipboardSrv.isTargetValid(this.targetElm)\n    ) {\n      this.handleResult(\n        this.clipboardSrv.copyFromInputElement(this.targetElm),\n        this.targetElm.value\n      );\n    } else if (this.cbContent) {\n      this.handleResult(\n        this.clipboardSrv.copyFromContent(this.cbContent),\n        this.cbContent\n      );\n    }\n  }\n\n  /**\n   * Fires an event based on the copy operation result.\n   * @param succeeded\n   */\n  private handleResult(succeeded: boolean, copiedContent: string | undefined) {\n    if (succeeded) {\n      this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent });\n    } else {\n      this.cbOnError.emit({ isSuccess: false });\n    }\n  }\n}\n","import { ClipboardDirective } from './ngx-clipboard.directive';\nimport { CLIPBOARD_SERVICE_PROVIDER } from './ngx-clipboard.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxWindowTokenModule } from 'ngx-window-token';\nexport * from './ngx-clipboard.directive';\nexport * from './ngx-clipboard.service';\n\n@NgModule({\n  imports: [CommonModule, NgxWindowTokenModule],\n  // tslint:disable-next-line:object-literal-sort-keys\n  declarations: [ClipboardDirective],\n  exports: [ClipboardDirective],\n  providers: [CLIPBOARD_SERVICE_PROVIDER]\n})\nexport class ClipboardModule {}\n"],"names":["Injectable","Inject","DOCUMENT","WINDOW","Optional","SkipSelf","EventEmitter","Directive","Input","Output","HostListener","NgModule","CommonModule","NgxWindowTokenModule"],"mappings":"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"}
